#!/bin/bash

# http://wiki.bash-hackers.org/syntax/arrays
# http://tldp.org/LDP/abs/html/arrays.html

# an empty array can be initialized with ()
# it matches equality with non-definied vars and empty strings ''
array=()
echo "\$array=$array"
echo "\${array[@]}=${array[@]}"
if [[ $array = '' ]]; then
	echo "\$array=='' is true"
fi

if [[ ${array[@]} = '' ]]; then
	echo "\${array[@]}=='' is true"
fi

if [[ "${array[@]}" = '' ]]; then
	echo "\"\${array[@]}\"=='' is true"
fi
echo


# it can contain intems separated by spaces or surrounded by quotes
array=(one two)
yarra=(first 'second element' 'and   the   third')


# To return all elements use the {} notation and access [@]
echo "\${array[@]}: ${array[@]}"
echo "\${yarra[@]}: ${yarra[@]}"
echo


# [*] outputs seemingly the same as [@]
echo "\${yarra[*]}: ${yarra[*]}"
# Except that it splits by the IFS
IFS="|"
echo "IFS=| \${yarra[*]}: ${yarra[*]}"
unset IFS
echo


# $varname returns the first element in an array, same with {} notation
echo "\$array: $array"
echo "\${yarra}: ${yarra}"
echo


# Length is returned with #
echo "\${#array[@]}: ${#array[@]}"
echo "\${#yarra[@]}: ${#yarra[@]}"
echo


# Access specific elements with [X]
# Unexisting elements print nothing
echo "\${array[0]}: ${array[0]}"
echo "\${array[1]}: ${array[1]}"
echo "\${array[2]}: ${array[2]}"
echo

echo "\${yarra[0]}: ${yarra[0]}"
echo "\${yarra[1]}: ${yarra[1]}"
echo "\${yarra[2]}: ${yarra[2]}"
echo "\${yarra[3]}: ${yarra[3]}"
echo


# Access can also be done with ${a[@]:start:length}
# which allows negative indexes
echo "\${yarra[@]:0:1}: ${yarra[@]:0:1}"
echo "\${yarra[@]:0:2}: ${yarra[@]:0:2}"
echo "\${yarra[@]:0}: ${yarra[@]:0}"
echo "\${yarra[@]:(-1)}: ${yarra[@]:(-1)}"
echo "\${yarra[@]:(-1):2}: ${yarra[@]:(-1):2}"
echo "\${yarra[@]:(-2)}: ${yarra[@]:(-2)}"
echo "\${yarra[@]:(-2):1}: ${yarra[@]:(-2):1}"
echo
exit 0

# To copy an array surround it in quotes and parenthesis
goodCopy=("${yarra[@]}")
baadCopy=(${yarra[@]})

echo "\${goodCopy}[@]: ${goodCopy[@]}"
echo "\${baadCopy}[@]: ${baadCopy[@]}"
echo


# Otherwise elements with spaces in them will get messed up
echo "\${goodCopy}[1]: ${goodCopy[1]}"
echo "\${baadCopy}[1]: ${baadCopy[1]}"
echo


# Elements can be pushed into an array with += and parenthesis
arrayCopy=("${array[@]}")
echo "\${#arrayCopy[@]}: ${#arrayCopy[@]}"
echo "\${arrayCopy[@]}: ${arrayCopy[@]}"
arrayCopy+=('pushed with +=')
echo "\${#arrayCopy[@]}: ${#arrayCopy[@]}"
echo "\${arrayCopy[@]}: ${arrayCopy[@]}"
echo "\${arrayCopy[2]}: ${arrayCopy[2]}"
echo


# Or other arrays concatenated, same rules as copying apply
# Appending one item is actually contatenating a one-element-array
goodConcat=("${array[@]}")
baadConcat=("${array[@]}")

goodConcat+=("${yarra[@]}")
baadConcat+=(${yarra[@]})

echo "\${#goodConcat[@]}: ${#goodConcat[@]}"
echo "\${goodConcat[@]}: ${goodConcat[@]}"
echo "\${goodConcat[3]}: ${goodConcat[3]}"
echo

echo "\${#baadConcat[@]}: ${#baadConcat[@]}"
echo "\${baadConcat[@]}: ${baadConcat[@]}"
echo "\${baadConcat[3]}: ${baadConcat[3]}"
echo


# To do a loop provide the array with quotes
for value in "${yarra[@]}"; do
	echo "loop with \"\${yarra[@]}\": $value"
done
echo

# Otherwise values without spaces will get messed up
for value in ${yarra[@]}; do
	echo "loop with \${yarra[@]}: $value"
done
echo

# For appending, the empty array does make a difference
emptyStart=()
fillyStart=''

echo "\${#emptyStart[@]}: ${#emptyStart[@]}"
echo "\${#fillyStart[@]}: ${#fillyStart[@]}"
echo "\${#nooneStart[@]}: ${#nooneStart[@]}"
echo

emptyStart+=("pushed to empty")
fillyStart+=("pushed to filly")

# Apending to a none existent array creates it
nooneStart+=("pushed to noone")

echo "\${#emptyStart[@]}: ${#emptyStart[@]}"
echo "\${emptyStart[@]}: ${emptyStart[@]}"
echo "\${#fillyStart[@]}: ${#fillyStart[@]}"
echo "\${fillyStart[@]}: ${fillyStart[@]}"
echo "\${#nooneStart[@]}: ${#nooneStart[@]}"
echo "\${nooneStart[@]}: ${nooneStart[@]}"
echo


# Another way to loop an array
index=0
while true; do
	echo "\${yarra[$index]}: ${yarra[$index]}"
	index=$(($index+1))
	if [[ $index -ge $((${#yarra[@]} + 1)) ]]; then
		# Going over one just to see the operation in the if
		break
	fi
done


