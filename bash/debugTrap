#!/bin/bash


# `trap debug` will execute a string for each command run
# echoes from the debugTrap will print before that echos from the command

# do the debug trap happens actually before the command? or only displays happens before?


debugTrap() {
	# echo "debugTrap: caller: $(caller 1)"
	# echo "debugTrap: caller 0: $(caller 0)"
	# echo "debugTrap: caller 1: $(caller 1)"

	local frame=$(caller 0)
	local lineNo=${frame%% *} # Remove all tail but the line number
	local file=${frame#* * } # Remove from front line number and subroutine

	# echo "\$lineNo: $lineNo \$file: $file"
	local RED='\033[0;31m'
	local ORANGE='\033[0;33m'
	local NO_COLOR='\033[0m'
	local codeLine="$(tail -n +$lineNo "$file" | head -n 1)"
	echo
	echo -e "$RED> [frame]: $ORANGE$frame$NO_COLOR"
	echo -e "$RED> [exec line]: $ORANGE$codeLine$NO_COLOR"
}


trap 'debugTrap' DEBUG


echo 'some echo'

echo 'another echo'

echo 'commands split by...'; echo 'semicolon' # will trigger a trap for each command

if [[ 1 -eq 1 ]]; then # this will trigger one debug trap
	echo "inside if" # and this one a separate one
fi

if [[ 1 -eq 0 ]]; then
	echo "inside false if"
fi

true

false

# seems like the subshel has its own traps, or traps dont get inherited
( echo "inside an subshell, NOT TRAPPED?!" )

{ echo "inside a codeblock"; } # codeblock triggers just one trap

eval 'echo "echo inside eval"' # two traps, one for eval, one for echo

eval '( echo "inside an eval subshell" )' # one trap for eval, and subshell does not get trapped

eval '{ echo "inside a eval codeblock"; }' # two traps, one for eval, one for echo

eval '( echo "inside a failed eval subshell"; exit 1; )'

